{"version":3,"sources":["webpack:///src/src/App.vue","app.b2f7eecc.css","webpack:///src/components/src/components/KeywordSearch.vue"],"names":[],"mappings":"AAaA,KACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aAAA,CACA,eCXA,CC4KA,8DACA,WDxKA,CC0KA,gCACA,eDxKA","file":"app.b2f7eecc.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app'\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n\n.keyword-search[data-v-0b51fceb], table.music[data-v-0b51fceb] {\n  margin: auto;\n}\ntable.music td[data-v-0b51fceb] {\n  text-align: left;\n}\n\n\n/*# sourceMappingURL=app.b2f7eecc.css.map*/","<template>\n  <div class=\"keyword-search\">\n    <div id=\"login\" v-show=\"mustLogin && !loggedIn\" >\n      <div v-show=\"!loggedIn\">\n        <p>You must log in to Spotify to use this app.</p>\n        <p><button id=\"login-button\" @click=\"login\">Log In</button></p>\n      </div>\n      <div id=\"user-profile-template\"></div>\n      <div id=\"user-profile\"></div>\n      <div id=\"oauth-template\"></div>\n      <div id=\"oauth\"></div>\n    </div>\n    <div id=\"loggedIn\" v-show=\"loggedIn\">\n      <h3>Welcome {{me && me.display_name}}</h3>\n      <p>Music for your Mood</p>\n      <p v-show=\"query && query.length > 0\">This is a playlist based on <strong>{{query}}</strong></p>\n      <form v-on:submit.prevent=\"getPlaylist\">\n        <p>I'm feeling like...<input type=\"text\" v-model=\"query\" placeholder=\"something\">\n        <button>Go</button></p>\n      </form>\n      <table class=\"music\">\n        <tr v-for=\"(result,index) in results\" :key=\"index\">         \n          <td>{{result.name}}</td><td><button id=\"music-fetch-button\" @click=\"fetchMusic\">Fetch</button></td>\n        </tr>\n      </table>\n\n      <!-- <ul class=\"music\" v-if=\"results && results.length > 0\">\n       <li v-for=\"(result,index) in results\" :key=\"index\">\n            <span class=\"music-name\">{{result.name}}</span>\n            <input class=\"music-button\" type=\"button\" v-bind:value=\"result.name\">\n       </li>\n      </ul> -->\n    </div>      \n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n/**\n * Obtains para meters from the hash of the URL\n * @return Object\n */\nfunction getHashParams() {\n  var hashParams = {};\n  var e,\n    r = /([^&;=]+)=?([^&;]*)/g,\n    q = window.location.hash.substring(1);\n  while ((e = r.exec(q))) {\n    hashParams[e[1]] = decodeURIComponent(e[2]);\n  }\n  return hashParams;\n}\n/**\n * Generates a random string containing numbers and letters\n * @param  {number} length The length of the string\n * @return {string} The generated string\n */\nfunction generateRandomString(length) {\n  var text = \"\";\n  var possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (var i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\nfunction authorize(stateKey) {\n  var client_id = \"\";\n  var redirect_uri = \"\";\n  if (location.host == \"localhost:8080\") {\n    client_id = \"d691b67437944ac1bb56a568badcc0e1\";\n    redirect_uri = \"http://localhost:8080/authorize\";\n  } else {\n    client_id = \"d691b67437944ac1bb56a568badcc0e1\";\n    redirect_uri = \"https://spotify-test-84f79.firebaseapp.com/authorize\";\n  }\n  var state = generateRandomString(16);\n  localStorage.setItem(stateKey, state);\n  var scope = \"user-read-private user-read-email\";\n  var url = \"https://accounts.spotify.com/authorize\";\n  url += \"?response_type=token\";\n  url += \"&client_id=\" + encodeURIComponent(client_id);\n  url += \"&scope=\" + encodeURIComponent(scope);\n  url += \"&redirect_uri=\" + encodeURIComponent(redirect_uri);\n  // url += \"&redirect_uri=\" + redirect_uri;\n  url += \"&state=\" + encodeURIComponent(state);\n  window.location = url;\n}\nexport default {\n  name: \"KeywordSearch\",\n  data() {\n    debugger;\n    let loggedIn = this.$route.hash ? true : false;\n    return {\n      results: null,\n      me: null,\n      errors: [],\n      query: \"\",\n      mustLogin: true,\n      loggedIn: loggedIn,\n      access_token: this.$route.hash.substring(1)\n    };\n  },\n  mounted: function() {\n    console.log(\"access_token\", this.access_token);\n    if (this.access_token) {\n      let config = {\n        headers: {\n          Authorization: \"Bearer \".concat(this.access_token)\n        }\n      };\n      let URL = `https://api.spotify.com/v1/me`;\n      let self = this;\n      axios\n        .get(URL, config)\n        .then(response => {\n          self.me = response.data;\n        })\n        .catch(error => {\n          this.errors.push(error);\n        });\n    }\n  },\n  methods: {\n    login: function() {\n      let stateKey = \"spotify_auth_state\";\n      let params = getHashParams();\n\n      let storedState = localStorage.getItem(stateKey);\n\n      if (\n        this.access_token &&\n        (params.state == null || params.state !== storedState)\n      ) {\n        alert(\"There was an error during the authentication\");\n      } else {\n        localStorage.removeItem(stateKey);\n        if (this.access_token) {\n          axios.get({\n            url: \"https://api.spotify.com/v1/me\",\n            headers: {\n              Authorization: \"Bearer \" + access_token\n            },\n            success: function(response) {\n              userProfilePlaceholder.innerHTML = userProfileTemplate(response);\n              (this.mustLogin = false), (this.loggedIn = true);\n            }\n          });\n        } else {\n          (this.mustLogin = true), (this.loggedIn = false);\n        }\n      }\n      authorize(stateKey);\n    },\n    fetchMusic: function(){\n      return {};\n    },\n    getPlaylist: function() {\n      let config = {\n        headers: {\n          Authorization: \"Bearer \".concat(this.access_token)\n        }\n      };\n      let URL = `https://api.spotify.com/v1/search?type=playlist&q=${this.query}`;\n      let self = this;\n      axios\n        .get(URL, config)\n        .then(response => {\n          self.results = response.data.playlists.items;\n        })\n        .catch(error => {\n          this.errors.push(error);\n        });\n    }\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.keyword-search, table.music {\n  margin: auto;\n}\ntable.music td {\n  text-align: left;\n}\n</style>\n"]}